// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  price Float
  stock Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  cartItems CartItem[]
  orderItems OrderItem[]
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  name String?
  role String @default("user")
  hashedRt String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  articles Article[]
  cartItems CartItem[]
  orders Order[]
  permission String @default("viewer")
}

model Article {
  id Int @id @default(autoincrement())
  title String
  authorId Int
  author User @relation(fields: [authorId], references: [id])
  content String
}

model CartItem {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
}

model OrderItem {
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  price Float
}

model Order {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  item OrderItem[]
  total Float
  created DateTime @default(now())
}
